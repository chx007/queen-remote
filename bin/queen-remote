#!/usr/bin/env node

var app = require('commander'),
	path = require('path'),
	vm = require('vm'),
	utils = require('../lib/utils.js'),
	fs = require('fs'),
	queenRemote = require('../'),
	queenRunner = queenRemote.runner,
	queenRemoteClientFactory = queenRemote.client,
	appConfig = require('../package.json');

app.version(appConfig.version);	

app.option('-h, --host [host]', 'The host to bind the remote server to')
	.option('-p, --proxy [host]', 'Sets up this client as a proxy to it\'s server so other clients may connect to this client as if it were a queen server')
	.option('-v, --verbose', 'Whether to log verbosely')
	.option('-q, --quiet', 'Don\'t output anything to output stream')

var config = {};
app.command("*").action(function(filePath){
	config.module = path.resolve(process.cwd(), filePath);
});

app.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('  Run a JavaScript file using a remote queen server, adding in a "queen" global variable:');
  console.log('     $ queen-remote -h queen.turn.com my-queen-script.js');
  console.log('');
});

app.parse(process.argv);

config.remote = app.host;
config.host = app.proxy;
config.quiet = app.quiet;
config.verbose = app.verbose;

queenRunner(queenRemoteClientFactory, config, function(queen){
	if(queen instanceof Error){
		throw queen; // this is an error object
	} else {
		queen.on('dead', function(){
			process.exit(0);
		});
	}
});